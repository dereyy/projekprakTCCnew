steps:
  # Mengambil file .env dari Cloud Storage bucket
  - name: "gcr.io/cloud-builders/gsutil"
    args: ["cp", "gs://projekakhir/.env", ".env"]

  # Verifikasi file .env
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Verifying .env file:"
        cat .env
        echo "File size:"
        ls -l .env
        echo "Moving .env to be directory:"
        mv .env be/.env
        echo "Verifying final location:"
        ls -l be/.env

  # Membuat image dengan perintah "cloud build -t gcr.io/$PROJECT_ID/projek-akhir ."
  # Project ID akan secara otomatis terisi ketika melakukan deploy di project yg dipilih
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/$PROJECT_ID/projek-akhir", "."]
    dir: "be"

  # Verifikasi file .env dan environment variables di dalam image
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "=== Checking .env file inside the image ==="
        docker run --rm gcr.io/$PROJECT_ID/projek-akhir ls -la /app/.env
        echo -e "\n=== Content of .env file inside the image ==="
        docker run --rm gcr.io/$PROJECT_ID/projek-akhir cat /app/.env
        echo -e "\n=== Testing environment variables inside the image ==="
        docker run --rm gcr.io/$PROJECT_ID/projek-akhir node -e "
          require('dotenv').config();
          console.log('DB_HOST:', process.env.DB_HOST);
          console.log('DB_NAME:', process.env.DB_NAME);
          console.log('DB_USERNAME:', process.env.DB_USERNAME);
          console.log('DB_PASSWORD:', process.env.DB_PASSWORD ? 'Set' : 'Not Set');
          console.log('ACCESS_TOKEN_SECRET:', process.env.ACCESS_TOKEN_SECRET ? 'Set' : 'Not Set');
          console.log('REFRESH_TOKEN_SECRET:', process.env.REFRESH_TOKEN_SECRET ? 'Set' : 'Not Set');
        "

  # Meng-upload/push image yg telah dibuat ke Artifact Registry
  # Pada bagian ini, dijalankan perintah "docker push 'gcr.io/$PROJECT_ID/projek-akhir'"
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/projek-akhir"]

  # Membaca environment variables dari file .env
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Reading environment variables from .env file..."
        export DB_HOST=$(grep DB_HOST be/.env | cut -d '=' -f2)
        export DB_NAME=$(grep DB_NAME be/.env | cut -d '=' -f2)
        export DB_USERNAME=$(grep DB_USERNAME be/.env | cut -d '=' -f2)
        export DB_PASSWORD=$(grep DB_PASSWORD be/.env | cut -d '=' -f2)
        export ACCESS_TOKEN_SECRET=$(grep ACCESS_TOKEN_SECRET be/.env | cut -d '=' -f2)
        export REFRESH_TOKEN_SECRET=$(grep REFRESH_TOKEN_SECRET be/.env | cut -d '=' -f2)
        export PORT=$(grep PORT be/.env | cut -d '=' -f2)

        echo "Deploying to Cloud Run with environment variables..."
        gcloud run deploy projek-akhir \
          --image gcr.io/$PROJECT_ID/projek-akhir \
          --timeout 360s \
          --port 5001 \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars "DB_HOST=$DB_HOST,DB_NAME=$DB_NAME,DB_USERNAME=$DB_USERNAME,DB_PASSWORD=$DB_PASSWORD,ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET,REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET,PORT=$PORT"

# Log hanya akan disimpan di Google Cloud Logging
# Log tidak akan disimpan di Google Cloud Storage (butuh hak akses).
options:
  logging: CLOUD_LOGGING_ONLY
